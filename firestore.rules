/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a user-ownership model for private user data,
 * allows public read access to the 'works' collection (with owner-only writes),
 * and grants admin access based on the existence of a document in the 'roles_admin' collection.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data; only accessible by the user themselves.
 * - /works/{workId}: Stores musical works; publicly readable but only writable by the artist (owner).
 * - /wallets/{userId}: Stores token balances; only accessible by the user themselves.
 * - /vsd_transactions/{transactionId}: Stores transaction history; only accessible by the associated user.
 * - /contracts/{contractId}: Stores contract information; only accessible by the artist/owner.
 * - /knowledgebase/{topicId}: Stores knowledgebase articles; publicly readable.
 * - /roles_admin/{userId}: Indicates admin privileges; existence of document grants admin access.
 *
 * Key Security Decisions:
 * - Listing of users is disallowed.
 * - Admin privileges are granted based on document existence in `/roles_admin/{userId}` rather than a claim on the JWT.
 * - Ambiguous relationships default to strict owner-only access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @function isSignedIn
     * @description Checks if the request is authenticated.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @function isOwner
     * @description Checks if the authenticated user is the owner of the resource.
     * @param {string} userId - The user ID to compare against the request's auth UID.
     * @return {boolean} True if the user is the owner, false otherwise.
     * @example isOwner('someUserId')
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @function isAdmin
     * @description Checks if the user has admin privileges by verifying the existence of a document in /roles_admin/{userId}.
     * @return {boolean} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @function isExistingOwner
     * @description Checks if the authenticated user is the owner of the resource and that the resource exists.
     *              This function should be used for update and delete operations to prevent acting on non-existent data.
     * @param {string} userId - The user ID to compare against the request's auth UID.
     * @return {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Global admin role - grants full read and write access.
     * @path /
     * @allow (read, write) - Authenticated user with a document in `/roles_admin/{userId}`.
     * @deny (read, write) - Unauthenticated user.
     * @principle Grants admins full database access.
     */
    match /{document=**} {
      allow read, write: if isAdmin();
    }

    /**
     * @description Manages user profile data. Only the user can read, create, update, or delete their own profile.
     * @path /users/{userId}
     * @allow (get, list) - User with UID `userId` can read their profile.
     * @allow (create) - User with UID `userId` can create their profile if `request.resource.data.id == request.auth.uid`.
     * @allow (update) - User with UID `userId` can update their profile.
     * @allow (delete) - User with UID `userId` can delete their profile.
     * @deny (get, list, create, update, delete) - Any other user attempting to access this profile.
     * @principle Enforces strict user-ownership for profile data.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // Listing users is not permitted.
      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id; // Enforce immutability of id
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages token balances for each user. Path is userId for 1:1 mapping.
     * @path /wallets/{userId}
     * @allow (get) - User with UID `userId` can read their wallet.
     * @allow (create) - User with UID `userId` can create their wallet.
     * @allow (update) - User with UID `userId` can update their wallet.
     * @allow (delete) - User with UID `userId` can delete their wallet.
     * @deny (get, create, update, delete) - Any other user attempting to access this wallet.
     * @principle Enforces strict user-ownership for wallet data.
     */
    match /wallets/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // Listing wallets is not permitted.
      allow create: if isOwner(userId) && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId; // Enforce immutability of userId
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Represents a VSD-lite token transaction.
     * @path /vsd_transactions/{transactionId}
     * @allow (get) - User with UID `userId` (from the transaction data) can read the transaction.
     * @allow (create) - User with UID `userId` (from the transaction data) can create a transaction.
     * @allow (update) - No one can update a transaction.
     * @allow (delete) - No one can delete a transaction.
     * @deny (get, create, update, delete) - Any other user attempting to access this transaction.
     * @principle Enforces strict user-ownership for transaction data; transactions are append-only.
     */
    match /vsd_transactions/{transactionId} {
      allow get: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow list: if false; // Listing transactions is not permitted.
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid && request.resource.data.id == transactionId;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Central collection for all musical works. Publicly readable, but only the artist can modify.
     * @path /works/{workId}
     * @allow (get, list) - Any user can read works.
     * @allow (create) - User with UID `artistId` (from the work data) can create a work.
     * @allow (update, delete) - User with UID `artistId` (from the existing work data) can update or delete the work.
     * @deny (create, update, delete) - Any other user attempting to access this work.
     * @principle Allows public read access with owner-only writes; enforces artist ownership.
     */
    match /works/{workId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.artistId == request.auth.uid && request.resource.data.id == workId;
      allow update: if isExistingOwner(resource.data.artistId) && request.resource.data.artistId == resource.data.artistId; // Enforce immutability of artistId
      allow delete: if isExistingOwner(resource.data.artistId);
    }

   /**
    * @description Represents a licensing or split agreement.
    * @path /contracts/{contractId}
    * @allow (get) - User with UID `artistId` (from the contract data) can read the contract.
    * @allow (create) - User with UID `artistId` (from the contract data) can create a contract.
    * @allow (update) - User with UID `artistId` (from the contract data) can update the contract.
    * @allow (delete) - User with UID `artistId` (from the contract data) can delete the contract.
    * @deny (get, create, update, delete) - Any other user attempting to access this contract.
    * @principle Enforces strict user-ownership for contract data.
    */
    match /contracts/{contractId} {
      allow get: if isSignedIn() && resource.data.workId in get(/databases/$(database)/documents/works/$(resource.data.workId)).data.keys();
      allow list: if false; // Listing contracts is not permitted.
      allow create: if isSignedIn() && request.resource.data.workId in get(/databases/$(database)/documents/works/$(resource.data.workId)).data.keys() && request.resource.data.id == contractId;
      allow update: if isSignedIn() && request.resource.data.workId in get(/databases/$(database)/documents/works/$(resource.data.workId)).data.keys() && request.resource.data.workId == resource.data.workId; // Enforce immutability of workId
      allow delete: if isSignedIn() && request.resource.data.workId in get(/databases/$(database)/documents/works/$(resource.data.workId)).data.keys();
    }

    /**
     * @description Logs results of daily Muso.ai credit and exposure audits.
     * @path /musoAudits/{auditId}
     * @allow (read, create, update, delete) - No one can read, create, update, or delete the audit logs.
     * @principle Only accessible to system; no client access permitted.
     */
    match /musoAudits/{auditId} {
      allow get, list, create, update, delete: if false;
    }

    /**
     * @description Manages knowledgebase articles. Publicly readable.
     * @path /knowledgebase/{topicId}
     * @allow (get, list) - Any user can read knowledgebase articles.
     * @allow (create, update, delete) - No one can create, update, or delete knowledgebase articles.
     * @principle Allows public read access; enforces system-only writes.
     */
    match /knowledgebase/{topicId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Indicates admin privileges for a user. Document existence grants admin role.
     * @path /roles_admin/{userId}
     * @allow (get) - Any user can check if a user is an admin.
     * @allow (create) - Only a admin user can grant admin access
     * @allow (update, delete) - No one can update or delete this document directly.
     * @principle Admin role managed via document existence.
     */
    match /roles_admin/{userId} {
      allow get: if isAdmin();
      allow list: if false; // Listing admin roles is not permitted.
      allow create: if isAdmin();
      allow update: if false;
      allow delete: if false;
    }
  }
}