/**
 * @fileoverview Firestore Security Rules for VNDR Application
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-specific data, while allowing public read access to certain collections like 'works' and 'knowledgebase'.
 *
 * Data Structure:
 * - /users/{userId}: Stores core user profile data.
 * - /works/{workId}: Central collection for all musical works.
 * - /wallets/{userId}: Manages token balances for each user.
 * - /vsd_transactions/{transactionId}: Represents VSD-lite token transactions.
 * - /contracts/{contractId}: Represents licensing or split agreements.
 * - /musoAudits/{auditId}: Logs results of daily Muso.ai credit and exposure audits.
 * - /knowledgebase/{topicId}: Stores knowledge base articles.
 * - /roles_admin/{userId}: Indicates admin privileges for a user. Document existence grants admin role.
 *
 * Key Security Decisions:
 * - Users can only read and write their own wallet and user data.
 * - 'works' and 'knowledgebase' are publicly readable but writable only by authorized users (either the owner of the 'work' or an admin).
 * - Listing of user documents is disallowed.
 * - Default security posture for ambiguous relationships is strict owner-only access.
 *
 * Denormalization for Authorization:
 * - The 'works' document contains an 'artistId' field to enable ownership checks for updates and deletes.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the existing document.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user has admin privileges.
     */
    function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create their own profile document at /users/user123.
     * @deny (create) - User with UID 'user456' cannot create a profile document at /users/user123.
     * @allow (get, update, delete) - User with UID 'user123' can read, update, and delete their own profile document at /users/user123.
     * @deny (get, update, delete) - User with UID 'user456' cannot read, update, or delete the profile document at /users/user123.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // Listing user documents is not permitted

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for musical works (tracks).
     * @path /works/{workId}
     * @allow (get, list) - Any user can read the Work documents.
     * @allow (create) - User with UID 'artist123' can create a Work document if artistId matches.
     * @deny (create) - User with UID 'artist456' cannot create a Work document if artistId does not match.
     * @allow (update, delete) - User with UID 'artist123' can update and delete their own Work document where artistId matches.
     * @deny (update, delete) - User with UID 'artist456' cannot update or delete the Work document owned by 'artist123'.
     * @principle Public read access with owner-only writes.
     */
    match /works/{workId} {
      allow get, list: if true;

      allow create: if isSignedIn() && request.resource.data.artistId == request.auth.uid;
      allow update: if isSignedIn() && resource.data.artistId == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.artistId == request.auth.uid;
    }

    /**
     * @description Rules for user wallets.
     * @path /wallets/{userId}
     * @allow (get) - User 'user123' can read their own wallet at /wallets/user123.
     * @deny (get) - User 'user456' cannot read the wallet of 'user123'.
     * @allow (create) - User 'user123' can create their own wallet at /wallets/user123.
     * @deny (create) - User 'user456' cannot create a wallet for 'user123'.
     * @allow (update, delete) - User 'user123' can update/delete their wallet at /wallets/user123.
     * @deny (update, delete) - User 'user456' cannot update/delete the wallet of 'user123'.
     * @principle Enforces document ownership for reads and writes.
     */
    match /wallets/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isOwner(userId) && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == userId;
      allow delete: if isExistingOwner(userId) && request.resource.data.userId == userId;
    }

    /**
     * @description Rules for VSD transactions.
     * @path /vsd_transactions/{transactionId}
     * @allow (get) - Any authenticated user can read a VSD Transaction.
     * @deny (get) - An unauthenticated user cannot read a VSD Transaction.
     * @allow (create) - Any authenticated user can create a VSD Transaction if the userID matches.
     * @deny (create) - Any authenticated user cannot create a VSD Transaction if the userID does not match.
     * @allow (update, delete) - No one can update or delete a VSD transaction.
     * @principle Enforces authentication for creation and read.
     */
    match /vsd_transactions/{transactionId} {
      allow get: if isSignedIn();
      allow list: if false; // Listing transactions is not permitted

      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if false;
      allow delete: if false;
    }

      /**
       * @description Rules for contracts.
       * @path /contracts/{contractId}
       * @allow (get, list) - Any user can read any contract.
       * @allow (create) - No one can create a new contract.
       * @allow (update, delete) - No one can update or delete an existing contract.
       */
      match /contracts/{contractId} {
        allow get, list: if true;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
      }

      /**
       * @description Rules for Muso Audits.
       * @path /musoAudits/{auditId}
       * @allow (get, list) - No one can get/list audits
       * @allow (create, update, delete) - Only admin accounts can perform writes.
       */
      match /musoAudits/{auditId} {
        allow get, list: if false;
        allow create: if isAdmin();
        allow update: if isAdmin() && resource != null;
        allow delete: if isAdmin() && resource != null;
      }

      /**
       * @description Rules for Knowledgebase Articles.
       * @path /knowledgebase/{topicId}
       * @allow (get, list) - Any user can read the Knowledgebase Articles.
       * @allow (create, update, delete) - No one can create, update or delete the Knowledgebase Articles.
       */
      match /knowledgebase/{topicId} {
        allow get, list: if true;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
      }

       /**
        * @description Rules for roles_admin.
        * @path /roles_admin/{userId}
        * @allow (get) - No one can get the role admin doc.
        * @allow (create, update, delete) - Only can be created, updated, or deleted by the user with admin privileges.
        */
      match /roles_admin/{userId} {
        allow get: if isAdmin();
        allow list: if false;

        allow create: if isAdmin();
        allow update: if isAdmin() && resource != null;
        allow delete: if isAdmin() && resource != null;
      }
  }
}