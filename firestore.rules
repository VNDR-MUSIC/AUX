/**
 * @fileoverview Firestore Security Rules for VNDR Music App
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-specific data (e.g., wallets),
 * while allowing public read access to certain collections (e.g., works).
 * Write access to user-owned data is restricted to the owner, and administrative privileges are
 * granted based on the existence of a document in the `/roles_admin/{userId}` collection.
 *
 * Data Structure:
 * - /users/{userId}: Stores core user profile data, only accessible by the user.
 * - /works/{workId}: Stores musical works. Publicly readable but only writable by the artist (owner).
 * - /wallets/{userId}: Manages token balances for each user, only accessible by the user. The document ID is the userId.
 * - /vsd_transactions/{transactionId}: Represents VSD token transactions, only accessible by the related user.
 * - /contracts/{contractId}: Represents licensing or split agreements.
 * - /musoAudits/{auditId}: Logs results of daily Muso.ai credit and exposure audits.
 * - /knowledgebase/{topicId}: Public knowledgebase articles.
 * - /roles_admin/{userId}: Indicates admin privileges for a user.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect privacy.
 * - The `wallets` collection uses the `userId` as the document ID to enforce a 1:1 relationship,
 *   simplifying security rules and ensuring that each user has only one wallet.
 * - Public read access is granted to the `works` and `knowledgebase` collections.
 *
 * Denormalization for Authorization:
 * - The `works` documents MUST contain an `artistId` field to enforce ownership for write operations.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is an existing owner.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user has admin privileges based on the existence of a document in `/roles_admin/{userId}`.
     */
    function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Rules for the /users/{userId} collection.
     * @path /users/{userId}
     * @allow (create) User 'testUid' can create their own profile: auth.uid == 'testUid'.
     * @deny (create) User 'otherUid' cannot create a profile for 'testUid': auth.uid != 'testUid'.
     * @allow (get) User 'testUid' can read their own profile: auth.uid == 'testUid'.
     * @deny (get) User 'otherUid' cannot read user 'testUid' profile: auth.uid != 'testUid'.
     * @principle Enforces document ownership for writes; restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow get: if isOwner(userId);
      allow list: if false;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /works/{workId} collection.
     * @path /works/{workId}
     * @allow (get, list) Any user can read or list works.
     * @allow (create) User 'testUid' can create a work if they are the artist: request.resource.data.artistId == 'testUid'.
     * @deny (create) User 'otherUid' cannot create a work for 'testUid': request.resource.data.artistId != 'testUid'.
     * @allow (update, delete) User 'testUid' can update or delete their own work: resource.data.artistId == 'testUid'.
     * @deny (update, delete) User 'otherUid' cannot update or delete user 'testUid' work: resource.data.artistId != 'testUid'.
     * @principle Allows public read access with owner-only writes. Enforces ownership via the 'artistId' field.
     */
    match /works/{workId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.artistId == request.auth.uid;
      allow update: if isSignedIn() && resource.data.artistId == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.artistId == request.auth.uid;
    }

    /**
     * @description Rules for the /wallets/{userId} collection.
     * @path /wallets/{userId}
     * @allow (create) User 'testUid' can create their own wallet: auth.uid == 'testUid'.
     * @deny (create) User 'otherUid' cannot create a wallet for 'testUid': auth.uid != 'testUid'.
     * @allow (get) User 'testUid' can read their own wallet: auth.uid == 'testUid'.
     * @deny (get) User 'otherUid' cannot read user 'testUid' wallet: auth.uid != 'testUid'.
     * @principle Enforces document ownership for writes; restricts access to a user's own data.
     */
    match /wallets/{userId} {
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow get: if isOwner(userId);
      allow list: if false;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if false; // Wallets should not be deleted.
    }

    /**
     * @description Rules for the /vsd_transactions/{transactionId} collection.
     * @path /vsd_transactions/{transactionId}
     * @allow (create) User 'testUid' can create a transaction if they are the owner.
     * @deny (create) User 'otherUid' cannot create a transaction for 'testUid'.
     * @allow (get) User 'testUid' can read their own transactions.
     * @deny (get) User 'otherUid' cannot read user 'testUid' transactions.
     * @principle Enforces document ownership; restricts access to a user's own transactions.
     */
    match /vsd_transactions/{transactionId} {
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow get: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow list: if isSignedIn() && request.auth.uid == resource.data.userId;
      allow update: if false; // Transactions should not be updated.
      allow delete: if false; // Transactions should not be deleted.
    }

    /**
     * @description Rules for the /contracts/{contractId} collection.
     * @path /contracts/{contractId}
     * @principle: Only admins can create, update or delete contracts. Others can read if they're a party to the contract.
     */
    match /contracts/{contractId} {
      allow get: if isSignedIn() && resource.data.parties.hasAny([request.auth.uid]);
      allow list: if isSignedIn() && resource.data.parties.hasAny([request.auth.uid]);
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for the /musoAudits/{auditId} collection.
     * @path /musoAudits/{auditId}
     */
    match /musoAudits/{auditId} {
        allow read, write: if isAdmin();
    }

    /**
     * @description Rules for the /knowledgebase/{topicId} collection.
     * @path /knowledgebase/{topicId}
     * @principle Allows public read access.
     */
    match /knowledgebase/{topicId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

      /**
       * @description Rules for the /roles_admin/{userId} collection.
       * @path /roles_admin/{userId}
       * @principle Only admins can manage the admin roles.
       */
    match /roles_admin/{userId} {
        allow get: if isAdmin();
        allow list: if isAdmin();
        allow create: if isAdmin();
        allow update: if isAdmin();
        allow delete: if isAdmin();
    }
  }
}