/**
 * @fileoverview Firestore Security Rules for VNDR Music Platform
 *
 * Core Philosophy:
 * This ruleset prioritizes a secure, scalable data model. It employs a combination of ownership-based access control for user-specific data and public read access with owner-only writes for shared content like musical works.  The rules are designed to be as simple and performant as possible.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data; access is restricted to the owning user.
 * - /works/{workId}: Central collection for musical works. Read access is public, while writes are restricted to the artist who created the work (identified by the 'artistId' field).
 * - /wallets/{userId}: Stores token balances; access is restricted to the owning user (userId matches document ID).
 * - /vsd_transactions/{transactionId}: Stores transaction data; access is restricted to the owning user.
 * - /contracts/{contractId}: Stores contract data; access is publicly readable but only the owner is able to edit.
 * - /musoAudits/{auditId}: Logs Muso.ai audit results. No client-side access is allowed.
 * - /knowledgebase/{topicId}: Stores knowledge base articles; access is public.
 * - /roles_admin/{userId}: Document existence grants admin role to user.
 *
 * Key Security Decisions:
 * - Public read access for musical works and knowledge base articles to facilitate discovery and learning.
 * - Strict user-ownership for wallets and transaction history to protect financial data.
 * - No client-side listing of Muso.ai audit logs.
 * - Denormalization: The `Work` entity relies on denormalization.  Each work MUST have an `artistId` field that matches the UID of the artist who created it.  This is enforced on creation and immutability is enforced on updates.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the existing document.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user has admin privileges based on their UID
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Rules for /users/{userId} documents.
     * @path /users/{userId}
     * @allow (create) User 'abc' can create their own profile: auth.uid == 'abc' and request.resource.data.id == 'abc'.
     * @allow (get, update, delete) User 'abc' can read/update/delete their own profile: auth.uid == 'abc'.
     * @deny (create) User 'def' cannot create a profile for user 'abc': auth.uid == 'def' and request.resource.data.id == 'abc'.
     * @deny (get, update, delete) User 'def' cannot read/update/delete user 'abc's profile: auth.uid == 'def'.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for /works/{workId} documents.
     * @path /works/{workId}
     * @allow (get, list) Any user can read/list published works.
     * @allow (create) User 'abc' can create a work if they are the artist: auth.uid == 'abc' and request.resource.data.artistId == 'abc'.
     * @allow (update, delete) User 'abc' can update/delete their own work if they are the artist: auth.uid == 'abc' and resource.data.artistId == 'abc'.
     * @deny (create) User 'def' cannot create a work for user 'abc': auth.uid == 'def' and request.resource.data.artistId == 'abc'.
     * @deny (update, delete) User 'def' cannot update/delete user 'abc's work: auth.uid == 'def' and resource.data.artistId == 'abc'.
     * @principle Allows public read access, enforces document ownership for writes.
     */
    match /works/{workId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.artistId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.artistId);
      allow delete: if isExistingOwner(resource.data.artistId);
    }

    /**
     * @description Rules for /wallets/{userId} documents.
     * @path /wallets/{userId}
     * @allow (create) User 'abc' can create their own wallet: auth.uid == 'abc' and request.resource.data.userId == 'abc'.
     * @allow (get, update, delete) User 'abc' can read/update/delete their own wallet: auth.uid == 'abc'.
     * @deny (create) User 'def' cannot create a wallet for user 'abc': auth.uid == 'def' and request.resource.data.userId == 'abc'.
     * @deny (get, update, delete) User 'def' cannot read/update/delete user 'abc's wallet: auth.uid == 'def'.
     * @principle Enforces document ownership for wallets.
     */
    match /wallets/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for /vsd_transactions/{transactionId} documents.
     * @path /vsd_transactions/{transactionId}
     * @allow (get, list) User 'abc' can read their own transactions: auth.uid == 'abc'.
     * @allow (create) User 'abc' can create their own transaction: auth.uid == 'abc' and request.resource.data.userId == 'abc'.
     * @allow (update, delete) User 'abc' can update/delete their own transaction: auth.uid == 'abc' and resource.data.userId == 'abc'.
     * @deny (get, list) User 'def' cannot read user 'abc's transactions: auth.uid == 'def'.
     * @deny (create) User 'def' cannot create a transaction for user 'abc': auth.uid == 'def' and request.resource.data.userId == 'abc'.
     * @deny (update, delete) User 'def' cannot update/delete user 'abc's transaction: auth.uid == 'def'.
     * @principle Enforces document ownership for transaction history.
     */
    match /vsd_transactions/{transactionId} {
      allow get: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow list: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(resource.data.userId);
    }

    /**
     * @description Rules for /contracts/{contractId} documents.
     * @path /contracts/{contractId}
     * @allow (get, list) Any user can read/list existing contracts.
     * @allow (create, update, delete) Placeholder rules.  Implement authorization based on contract parties.
     * @principle Public read access; write access to be defined based on contract participants.
     */
    match /contracts/{contractId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin(); // TODO: Implement contract creation authorization logic
      allow update: if isAdmin(); // TODO: Implement contract update authorization logic
      allow delete: if isAdmin(); // TODO: Implement contract delete authorization logic
    }

    /**
     * @description Rules for /musoAudits/{auditId} documents.
     * @path /musoAudits/{auditId}
     * @allow (get, list, create, update, delete) No client-side access allowed. Only server-side.
     * @principle No direct client access to audit logs.
     */
    match /musoAudits/{auditId} {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for /knowledgebase/{topicId} documents.
     * @path /knowledgebase/{topicId}
     * @allow (get, list) Any user can read/list knowledge base articles.
     * @allow (create, update, delete) Placeholder rules.  Implement authorization based on admin roles.
     * @principle Public read access; write access restricted to admins.
     */
    match /knowledgebase/{topicId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

     /**
      * @description Rules for /roles_admin/{userId} documents.
      * @path /roles_admin/{userId}
      * @allow (get, list, create, update, delete) Only available by server
      */
    match /roles_admin/{userId} {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}