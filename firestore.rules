/**
 * @fileoverview Firestore Security Rules for VNDR Music Platform
 *
 * Core Philosophy:
 * This ruleset prioritizes user data protection and enforces a strict ownership model
 * for user-related data (profiles, wallets). Public read access is granted for
 * specific collections like 'works' to enable content discovery while maintaining
 * owner-only write access.
 *
 * Data Structure:
 * - /users/{userId}: User profile information, accessible only to the user.
 * - /works/{workId}: Music tracks, publicly readable but only writable by the owner.
 * - /wallets/{userId}: User's token balances, accessible only to the user.
 * - /vsd_transactions/{transactionId}: Records of token transactions, accessible only to the owner.
 * - /contracts/{contractId}: Licensing and split agreements.
 * - /knowledgebase/{topicId}: Publicly available help articles.
 * - /roles_admin/{userId}: Documents indicating admin privileges.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect user privacy.
 * - Wallets are secured with strict ownership.
 * - Public content ('works') uses an owner-only write pattern.
 * - No schema validation is performed in this prototype phase beyond authorization checks.
 *
 * Denormalization for Authorization:
 *  - Each work document has `artistId` for checking ownership.
 *  - Wallet documents are named by `userId` to avoid `get()` calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @param {string} userId The user ID to compare against the authenticated user's ID.
     * @return {boolean} True if the user IDs match, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

     /**
      * @description Checks if the authenticated user is the existing owner of the document.
      * @param {string} userId The user ID to compare against the authenticated user's ID.
      * @return {boolean} True if the user IDs match and the resource exists, false otherwise.
      */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Defines the admin role check.
     * @return {boolean} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Rules for user profiles. Only the user can read/write their own profile.
     * @path /users/{userId}
     * @allow (create) User 'abc' can create their own profile if authenticated as 'abc'.
     * @deny (create) User 'abc' cannot create a profile for user 'def'.
     * @allow (get) User 'abc' can read their own profile.
     * @deny (get) User 'abc' cannot read user 'def's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow get: if isOwner(userId);
      allow list: if false;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for musical works. Public read, owner-only write.
     * @path /works/{workId}
     * @allow (get) Any user can retrieve a work.
     * @allow (list) Any user can list works.
     * @allow (create) User 'abc' can create a work if artistId matches.
     * @deny (create) User 'abc' cannot create a work with a mismatched artistId.
     * @deny (update) User 'abc' cannot update a work they don't own.
     * @principle Public read with owner-only writes.
     */
    match /works/{workId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.artistId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.artistId);
      allow delete: if isExistingOwner(resource.data.artistId);
    }

    /**
     * @description Rules for user wallets. Only the user can read/write their own wallet.
     * @path /wallets/{userId}
     * @allow (create) User 'abc' can create their wallet if authenticated as 'abc'.
     * @deny (create) User 'abc' cannot create a wallet for user 'def'.
     * @allow (get) User 'abc' can read their own wallet.
     * @deny (get) User 'abc' cannot read user 'def's wallet.
     * @principle Enforces document ownership for all operations.
     */
    match /wallets/{userId} {
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow get: if isOwner(userId);
      allow list: if false;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for VSD transactions. Only the owner can manage their transactions.
     * @path /vsd_transactions/{transactionId}
     * @allow (create) User 'abc' can create a transaction if userId matches.
     * @deny (create) User 'abc' cannot create a transaction for user 'def'.
     * @deny (update) User 'abc' cannot update a transaction they don't own.
     * @principle Enforces document ownership for all operations.
     */
    match /vsd_transactions/{transactionId} {
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow get: if isOwner(resource.data.userId);
      allow list: if isOwner(resource.data.userId);
      allow update: if isExistingOwner(resource.data.userId);
      allow delete: if isExistingOwner(resource.data.userId);
    }

    /**
     * @description Rules for contracts.
     * @path /contracts/{contractId}
     */
    match /contracts/{contractId} {
        allow get: if true;
        allow list: if true;
        allow create: if isAdmin();
        allow update: if isAdmin();
        allow delete: if isAdmin();
    }

   /**
    * @description Rules for musoAudits. Only admin can create, all can read
    * @path /musoAudits/{auditId}
    */
    match /musoAudits/{auditId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for Knowledgebase Articles. Public read, admin write.
     * @path /knowledgebase/{topicId}
     */
    match /knowledgebase/{topicId} {
        allow get, list: if true;
        allow create: if isAdmin();
        allow update: if isAdmin();
        allow delete: if isAdmin();
    }

    /**
     * @description Admin role check. Document existence confers admin privileges.
     * @path /roles_admin/{userId}
     */
    match /roles_admin/{userId} {
        allow get: if isAdmin();
        allow list: if false;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }
  }
}