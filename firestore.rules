/**
 * @fileoverview Firestore Security Rules for VNDR Music Platform
 *
 * Core Philosophy:
 * This ruleset implements a hybrid security model. It enforces strict ownership for user-related data and allows public read access for certain collections like 'works' while restricting write access to authorized users. Admin privileges are granted based on document existence in `/roles_admin/{userId}`.
 *
 * Data Structure:
 * - /users/{userId}:  User profiles, secured by ownership.
 * - /works/{workId}:  Music tracks, publicly readable but writable only by the artist (owner) or admins.
 * - /wallets/{userId}:  User wallets, secured by ownership (userId is the document ID).
 * - /vsd_transactions/{transactionId}: Token transactions, secured by user ID.
 * - /contracts/{contractId}: Contracts for licensing/splits.
 * - /musoAudits/{auditId}:  Audit logs.
 * - /knowledgebase/{topicId}: Public knowledge base articles.
 * - /roles_admin/{userId}:  Admin role flags; existence grants admin access.
 *
 * Key Security Decisions:
 * - Public read access to the 'works' and 'knowledgebase' collections allows for open discovery and content consumption.
 * - Data consistency between user IDs in paths and document fields is enforced for 'users' and 'wallets'.
 * - Admin privileges are determined by the existence of a document in the `/roles_admin/{userId}` collection.
 * - Listing of documents is allowed for the owner in user-scoped subcollections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to user profiles.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' creates their profile.
     * @allow (get, update, delete) User with ID 'user123' reads/updates/deletes their own profile.
     * @deny (create) User with ID 'user456' attempts to create a profile for 'user123'.
     * @deny (get, update, delete) User with ID 'user456' attempts to read/update/delete 'user123' profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
       function isAdmin() {
          return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
        }

      allow get: if isOwner(userId) || isAdmin();
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && resource.data.id == userId || isAdmin();
      allow delete: if isOwner(userId) && resource.data.id == userId && resource != null || isAdmin();
    }

    /**
     * @description Grants public read access to musical works, but restricts write access to the artist (owner) or admins.
     * @path /works/{workId}
     * @allow (get, list) Any user can read/list all works.
     * @allow (create) Artist with ID 'artist123' creates a work with artistId 'artist123'.
     * @allow (update, delete) Artist with ID 'artist123' updates/deletes their own work with artistId 'artist123'.
     * @deny (create) User with ID 'user456' attempts to create a work with artistId 'artist123'.
     * @deny (update, delete) User with ID 'user456' attempts to update/delete work with artistId 'artist123'.
     * @principle Allows public read access while enforcing ownership for write operations.
     */
    match /works/{workId} {
      function isOwner(artistId) {
        return request.auth != null && request.auth.uid == artistId;
      }

      function isAdmin() {
          return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
        }
      allow get: if true;
      allow list: if true;
      allow create: if (request.auth != null && request.resource.data.artistId == request.auth.uid) || isAdmin();
      allow update: if (isOwner(resource.data.artistId) && resource != null) || isAdmin();
      allow delete: if (isOwner(resource.data.artistId) && resource != null) || isAdmin();
    }

    /**
     * @description Grants access to user wallets, secured by ownership.
     * @path /wallets/{userId}
     * @allow (create) User with ID 'user123' creates their wallet.
     * @allow (get, update, delete) User with ID 'user123' reads/updates/deletes their own wallet.
     * @deny (create) User with ID 'user456' attempts to create a wallet for 'user123'.
     * @deny (get, update, delete) User with ID 'user456' attempts to read/update/delete 'user123' wallet.
     * @principle Enforces document ownership for all operations.
     */
    match /wallets/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

       function isAdmin() {
          return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
        }

      allow get: if isOwner(userId) || isAdmin();
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isOwner(userId) && resource.data.userId == userId || isAdmin();
      allow delete: if isOwner(userId) && resource.data.userId == userId && resource != null || isAdmin();
    }

    /**
     * @description Grants access to VSD transactions, secured by user ID.
     * @path /vsd_transactions/{transactionId}
     * @allow (create) User with ID 'user123' creates a transaction for themself.
     * @allow (get, list) User with ID 'user123' reads/lists their own transactions.
     * @allow (update, delete) User with ID 'user123' updates/deletes their own transactions.
     * @deny (create) User with ID 'user456' attempts to create a transaction for 'user123'.
     * @deny (get, list, update, delete) User with ID 'user456' attempts to read/list/update/delete 'user123' transactions.
     * @principle Enforces document ownership for all operations.
     */
    match /vsd_transactions/{transactionId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

       function isAdmin() {
          return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
        }

      allow get: if isOwner(resource.data.userId) || isAdmin();
      allow list: if isOwner(request.auth.uid) || isAdmin();
      allow create: if (request.auth != null && request.resource.data.userId == request.auth.uid) || isAdmin();
      allow update: if (isOwner(resource.data.userId) && resource != null) || isAdmin();
      allow delete: if (isOwner(resource.data.userId) && resource != null) || isAdmin();
    }

    /**
     * @description Grants access to contracts.
     * @path /contracts/{contractId}
     * @allow (get, list) Any user can read/list all contracts.
     * @allow (create) Any authenticated user can create a contract.
     * @allow (update, delete) Only authenticated users can update/delete contracts.
     * @principle Allows public read access while enforcing authentication for write operations.
     */
    match /contracts/{contractId} {
      function isAdmin() {
          return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
        }

      allow get: if true;
      allow list: if true;
      allow create: if request.auth != null || isAdmin();
      allow update: if request.auth != null && resource != null || isAdmin();
      allow delete: if request.auth != null && resource != null || isAdmin();
    }

    /**
     * @description Grants access to musoAudits logs.
     * @path /musoAudits/{auditId}
     * @allow (get, list) Any user can read/list all musoAudits logs.
     * @allow (create) Only authenticated users can create a musoAudit log.
     * @allow (update, delete) Only authenticated users can update/delete musoAudit logs.
     * @principle Allows public read access while enforcing authentication for write operations.
     */
    match /musoAudits/{auditId} {
       function isAdmin() {
          return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
        }

      allow get: if true;
      allow list: if true;
      allow create: if request.auth != null || isAdmin();
      allow update: if request.auth != null && resource != null || isAdmin();
      allow delete: if request.auth != null && resource != null || isAdmin();
    }

    /**
     * @description Grants public read access to knowledge base articles.
     * @path /knowledgebase/{topicId}
     * @allow (get, list) Any user can read/list all articles.
     * @allow (create) Only authenticated users can create a knowledgebase article.
     * @allow (update, delete) Only authenticated users can update/delete knowledgebase articles.
     * @principle Allows public read access while enforcing authentication for write operations.
     */
    match /knowledgebase/{topicId} {
       function isAdmin() {
          return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
        }

      allow get: if true;
      allow list: if true;
      allow create: if request.auth != null || isAdmin();
      allow update: if request.auth != null && resource != null || isAdmin();
      allow delete: if request.auth != null && resource != null || isAdmin();
    }

     /**
      * @description Grants full access to admins based on document existence.
      * @path /roles_admin/{userId}
      * @allow (create, get, list, update, delete) Only admins can manage admin roles.
      * @principle Allows admins to manage admin privileges.
      */
     match /roles_admin/{userId} {
       function isAdmin() {
          return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
        }
        allow get: if isAdmin();
        allow list: if isAdmin();
        allow create: if isAdmin();
        allow update: if isAdmin();
        allow delete: if isAdmin();
     }
  }
}