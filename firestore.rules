/**
 * @fileoverview Firestore Security Rules for VNDR Music Platform
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for personal data (wallets) and a public-read, owner-write model for musical works.
 * Additionally, it defines path-based access control for user profiles,
 * administrative roles, and other resources.
 *
 * Data Structure:
 * - /users/{userId}: User profile data.
 * - /works/{workId}:  Musical works (tracks), publicly readable but owner-modifiable.
 * - /wallets/{userId}: User's token balance information.
 * - /vsd_transactions/{transactionId}: Records of VSD token transactions.
 * - /contracts/{contractId}: Licensing and split agreements.
 * - /knowledgebase/{topicId}: Articles and tutorials in a public knowledgebase.
 * - /musoAudits/{auditId}: Logs of daily Muso.ai audits (unsecured).
 * - /roles_admin/{userId}: Document existence grants admin role.
 *
 * Key Security Decisions:
 * - User listing is disabled for privacy.
 * - The /works collection uses a public-read, owner-write access pattern, requiring an 'artistId' field on each document.
 * - Wallets are strictly owned by the user; only the authenticated user can read or modify their own wallet.
 * - The musoAudits collection is currently unsecured and requires review.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to user profile documents.
     * @path /users/{userId}
     * @allow (create) - If the authenticated user's ID matches the userId in the path.
     * @allow (get, list) - If the authenticated user's ID matches the userId in the path.
     * @allow (update, delete) - If the authenticated user's ID matches the userId in the path and the document exists.
     * @deny (create) - If the authenticated user's ID does not match the userId in the path.
     * @deny (get, list) - If the authenticated user's ID does not match the userId in the path.
     * @deny (update, delete) - If the authenticated user's ID does not match the userId in the path, or if the document does not exist.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource.data);
      }
      allow create: if isOwner(userId);
      allow get: if isOwner(userId);
      allow list: if false;
      allow update, delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants public read access to musical works but restricts writes to the owner (artist).
     * @path /works/{workId}
     * @allow (get, list) - Anyone can read the works.
     * @allow (create) - Only if the 'artistId' field in the new document matches the authenticated user's ID.
     * @allow (update, delete) - Only if the authenticated user is the owner ('artistId' in the existing document matches the authenticated user's ID) and the document exists.
     * @deny (create) - If the 'artistId' field does not match the authenticated user's ID.
     * @deny (update, delete) - If the authenticated user is not the owner, or if the document does not exist.
     * @principle Implements a public-read, owner-write access pattern.
     */
    match /works/{workId} {
      function isOwner(artistId) {
        return request.auth != null && request.auth.uid == artistId;
      }
      function isExistingOwner(artistId) {
        return isOwner(artistId) && exists(resource.data);
      }
      allow get, list: if true;
      allow create: if request.auth != null && request.resource.data.artistId == request.auth.uid;
      allow update, delete: if isExistingOwner(resource.data.artistId);
    }

    /**
     * @description Secures user wallets, allowing only the owner to read and write.
     * @path /wallets/{userId}
     * @allow (get) - If the authenticated user's ID matches the userId in the path.
     * @allow (create) - If the authenticated user's ID matches the userId in the path.
     * @allow (update, delete) - If the authenticated user's ID matches the userId in the path and the document exists.
     * @deny (get) - If the authenticated user's ID does not match the userId in the path.
     * @deny (create) - If the authenticated user's ID does not match the userId in the path.
     * @deny (update, delete) - If the authenticated user's ID does not match the userId in the path, or if the document does not exist.
     * @principle Enforces strict document ownership.
     */
    match /wallets/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource.data);
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update, delete: if isExistingOwner(userId);
    }

    /**
     * @description Restricts access to VSD token transaction records to the owner.
     * @path /vsd_transactions/{transactionId}
     * @allow (create) - If the 'userId' field in the new document matches the authenticated user's ID.
     * @allow (get, list) - If the 'userId' field in the existing document matches the authenticated user's ID.
     * @allow (update, delete) - If the 'userId' field in the existing document matches the authenticated user's ID and the document exists.
     * @deny (create) - If the 'userId' field does not match the authenticated user's ID.
     * @deny (get, list) - If the 'userId' field does not match the authenticated user's ID.
     * @deny (update, delete) - If the 'userId' field does not match the authenticated user's ID, or if the document does not exist.
     * @principle Enforces document ownership.
     */
    match /vsd_transactions/{transactionId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
       function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource.data);
      }
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow get: if request.auth != null && resource.data.userId == request.auth.uid;
      allow list: if false;
      allow update, delete: if isExistingOwner(resource.data.userId);
    }

     /**
      * @description Controls access to contract documents.
      * @path /contracts/{contractId}
      * @allow (create, update, delete) - Always denied.
      * @allow (get, list) - Always denied.
      * @principle Restricts access to contracts.
      */
    match /contracts/{contractId} {
        allow create, update, delete: if false;
        allow get, list: if false;
    }

     /**
      * @description Allows public read access to knowledgebase articles. Write access is not granted.
      * @path /knowledgebase/{topicId}
      * @allow (get, list) - Anyone can read knowledgebase articles.
      * @allow (create, update, delete) - Always denied.
      * @principle Provides a public knowledgebase while restricting write access.
      */
    match /knowledgebase/{topicId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Logs results of daily Muso.ai credit and exposure audits.  Currently unsecured and requires review.
     * @path /musoAudits/{auditId}
     * @allow get, list, create, update, delete: if true;
     */
    match /musoAudits/{auditId} {
        allow get, list, create, update, delete: if true; // TODO: Review security implications
    }

    /**
     * @description Grants admin privileges based on the existence of a document in this collection.
     * @path /roles_admin/{userId}
     * @allow create: if request.auth != null && request.auth.uid == userId;
     * @allow get, list: if false;
     * @allow update, delete: if false;
     * @principle Uses document existence to grant admin roles.
     */
    match /roles_admin/{userId} {
      function isAdmin(userId) {
        return exists(/databases/$(database)/documents/roles_admin/$(userId));
      }
      allow create: if request.auth != null && request.auth.uid == userId;
      allow get: if isAdmin(userId);
      allow list: if false;
      allow update, delete: if false;
    }
  }
}