
{
  "entities": {
    "Work": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Work",
      "type": "object",
      "description": "Represents a musical work (track) in the VNDR ecosystem.",
      "properties": {
        "id": { "type": "string", "description": "Unique identifier for the Work." },
        "artistId": { "type": "string", "description": "Reference to the User who is the primary artist." },
        "title": { "type": "string" },
        "genre": { "type": "string" },
        "description": { "type": "string" },
        "uploadDate": { "type": "string", "format": "date-time" },
        "status": { "type": "string", "enum": ["pending", "processing", "published", "archived"], "description": "Processing status of the work."},
        "storagePath": { "type": "string", "description": "Path to the raw audio file in Cloud Storage." },
        "trackUrl": { "type": "string", "description": "Public URL for the streamable audio." },
        "coverArtUrl": { "type": "string", "description": "URL for the cover art." },
        "audioFeatures": {
          "type": "object",
          "properties": {
            "bpm": { "type": "number" },
            "key": { "type": "string" },
            "loudness": { "type": "number" },
            "energy": { "type": "number" },
            "mood": { "type": "array", "items": { "type": "string" } },
            "instrumentalRatio": { "type": "number" }
          }
        },
        "musoCreditsFetched": { "type": "boolean", "default": false },
        "musoExposureScore": { "type": "number" },
        "acrCloudFingerprinted": { "type": "boolean", "default": false },
        "enrichedMetadata": {
          "type": "object",
          "description": "Metadata added by Vertex AI.",
          "properties": {
            "tags": { "type": "array", "items": { "type": "string" } },
            "suggestedBuyers": { "type": "array", "items": { "type": "string" } },
            "suggestedCollaborators": { "type": "array", "items": { "type": "string" } }
          }
        },
        "forecasts": {
          "type": "object",
          "properties": {
             "streamingRevenue": { "type": "number" },
             "licensingRevenue": { "type": "number" }
          }
        },
        "plays": { "type": "number", "default": 0 }
      },
      "required": ["id", "artistId", "title", "uploadDate", "status", "storagePath"]
    },
    "User": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "title": "User",
        "type": "object",
        "description": "Represents a user profile, including their token balance.",
        "properties": {
            "id": { "type": "string" },
            "email": { "type": "string", "format": "email" },
            "username": { "type": "string" },
            "role": { "type": "string", "enum": ["artist", "buyer", "admin"] },
            "onboardingCompleted": { "type": "object" },
            "vsdBalance": { "type": "number", "default": 0 },
            "dailyTokenClaimed": { "type": "string", "format": "date" }
        },
        "required": ["id", "email"]
    },
     "VSDTransaction": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "VSDTransaction",
      "type": "object",
      "description": "Represents a VSD-lite token transaction.",
      "properties": {
        "id": { "type": "string" },
        "userId": { "type": "string" },
        "transactionDate": { "type": "string", "format": "date-time" },
        "amount": { "type": "number" },
        "type": { "type": "string", "description": "e.g., purchase, sale, service_fee, daily_reward" },
        "details": { "type": "string" }
      },
      "required": ["id", "userId", "transactionDate", "amount", "type"]
    },
    "Contract": {
        "title": "Contract",
        "type": "object",
        "description": "Represents a licensing or split agreement.",
        "properties": {
            "id": { "type": "string" },
            "workId": { "type": "string" },
            "type": { "type": "string", "enum": ["license", "split"] },
            "parties": { "type": "array", "items": { "type": "string" } },
            "status": { "type": "string", "enum": ["draft", "pending_approval", "active", "expired"] },
            "terms": { "type": "string", "description": "The full legal text of the contract." },
            "generatedBy": { "type": "string", "description": "Indicates if generated by 'Vertex AI' or 'user'." }
        }
    },
    "KnowledgebaseArticle": {
        "title": "KnowledgebaseArticle",
        "type": "object",
        "properties": {
            "id": { "type": "string" },
            "topic": { "type": "string" },
            "title": { "type": "string" },
            "content": { "type": "string", "description": "Markdown content for the article/tutorial." },
            "videoUrl": { "type": "string" }
        }
    }
  },
  "auth": {
    "providers": [
      "password",
      "google.com",
      "web3"
    ]
  },
  "firestore": {
    "rules": "rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    function isOwner(userId) {\n      return request.auth.uid == userId;\n    }\n\n    function isAdmin() {\n      return request.auth.token.admin == true;\n    }\n\n    match /users/{userId} {\n      allow read, update, create: if isOwner(userId) || isAdmin();\n    }\n\n    match /vsd_transactions/{transactionId} {\n      allow read, create: if isOwner(request.resource.data.userId) || isAdmin();\n    }\n\n    match /works/{workId} {\n      allow read: if true;\n      allow create: if isOwner(request.resource.data.artistId) || isAdmin();\n      allow update, delete: if isOwner(resource.data.artistId) || isAdmin();\n    }\n\n    match /license_requests/{requestId} {\n      allow create: if request.auth != null;\n      allow read, update: if isOwner(resource.data.artistId) || isOwner(resource.data.requestorId) || isAdmin();\n    }\n    match /license_requests {\n      allow list: if request.auth != null && request.query.where.artistId == request.auth.uid || isAdmin();\n    }\n\n    match /roles_admin/{userId} {\n       allow read: if isAdmin();\n    }\n  }\n}",
    "/users/{userId}": {
      "schema": "User",
      "description": "Stores core user profile data, including their VSD balance."
    },
    "/works/{workId}": {
      "schema": "Work",
      "description": "Central collection for all musical works."
    },
    "/vsd_transactions/{transactionId}": {
      "schema": "VSDTransaction"
    },
    "/contracts/{contractId}": {
      "schema": "Contract"
    },
    "/musoAudits/{auditId}": {
      "description": "Logs results of daily Muso.ai credit and exposure audits."
    },
    "/knowledgebase/{topicId}": {
      "schema": "KnowledgebaseArticle"
    },
    "/roles_admin/{userId}": {
      "description": "Indicates admin privileges for a user. Document existence grants admin role."
    },
    "reasoning": "The Firestore structure is designed for a scalable, event-driven architecture. The 'works' collection is central. All other data is either linked by ID or stored in separate collections to optimize for specific query patterns. The user's wallet balance is stored directly on the user document for fast, direct lookups and to simplify security rules. This structure minimizes nested data and supports the modular, serverless functions that will perform the heavy lifting for audio processing, AI enrichment, and external API integrations."
  }
}

    