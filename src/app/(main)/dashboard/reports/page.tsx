
'use client';

import { useState } from 'react';
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { FileText, Download, Loader2 } from "lucide-react";
import { Icons } from "@/components/icons";
import Link from "next/link";
import { useUser, useDoc, useMemoFirebase } from '@/firebase';
import { doc } from 'firebase/firestore';
import { useFirebase } from '@/firebase/provider';
import { generateReportAction } from '@/app/actions/music';
import { useToast } from '@/hooks/use-toast';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';

export default function ReportsPage() {
  const { user } = useUser();
  const { firestore } = useFirebase();
  const { toast } = useToast();

  const userRef = useMemoFirebase(() => (firestore && user ? doc(firestore, 'users', user.uid) : null), [firestore, user]);
  const { data: userData } = useDoc(userRef);

  const [isLoading, setIsLoading] = useState(false);
  const [report, setReport] = useState<string | null>(null);

  const handleGenerateReport = async () => {
    if (!user) return;
    setIsLoading(true);
    setReport(null);
    try {
      const result = await generateReportAction(user.uid);
      if (result.success && result.report) {
        setReport(result.report);
        toast({
          title: "Report Generated!",
          description: "25 VSD tokens have been deducted from your account.",
        });
      } else {
        throw new Error(result.message || "Failed to generate report.");
      }
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : "An unknown error occurred.";
      toast({
        variant: "destructive",
        title: "Error",
        description: errorMessage,
      });
    } finally {
      setIsLoading(false);
    }
  };

  const canGenerate = userData && userData.vsdBalance >= 25;

  return (
    <div className="container mx-auto py-8">
      <div className="mb-8">
        <h1 className="font-headline text-4xl font-bold tracking-tighter sm:text-5xl">Analytics & Reports</h1>
        <p className="mt-2 text-muted-foreground">
          Dive deep into your music's performance and generate detailed reports.
        </p>
      </div>

      <Card className="w-full">
        <CardHeader>
          <CardTitle>Generate Performance Report</CardTitle>
          <CardDescription>
            Our AI engine will analyze your entire catalog's performance, including streams, listener engagement, and potential licensing value to generate a comprehensive report.
          </CardDescription>
        </CardHeader>
        <CardContent className="flex flex-col items-center justify-center text-center py-16">
          <FileText className="h-24 w-24 text-muted-foreground/50 mb-6" />
          <p className="text-lg font-semibold">Unlock Actionable Insights</p>
          <p className="text-muted-foreground mt-2 max-w-md">
            Understand your audience, identify your top-performing tracks, and get strategic recommendations to grow your career.
          </p>
           <div className="mt-4 text-sm text-muted-foreground flex items-center gap-2">
                Report generation costs 
                <span className="font-bold flex items-center gap-1">
                     <Link href="https://vsd.network" target="_blank" rel="noopener noreferrer"><Icons.vsd className="h-4 w-4"/></Link> 25
                </span>
                 VSD Lite tokens.
            </div>
        </CardContent>
        <CardFooter className="flex-col items-center justify-center gap-4">
            <Button onClick={handleGenerateReport} disabled={isLoading || !canGenerate}>
              {isLoading ? (
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
              ) : (
                <Download className="mr-2 h-4 w-4" />
              )}
              {isLoading ? 'Generating Report...' : 'Generate Report'}
            </Button>
            {!isLoading && !canGenerate && user && (
              <p className="text-sm text-destructive">You need at least 25 VSD to generate a report. Your balance is {userData?.vsdBalance || 0}.</p>
            )}
        </CardFooter>
      </Card>
      
      {report && (
        <Card className="mt-8">
          <CardHeader>
            <CardTitle className="font-headline text-2xl">Your Performance Report</CardTitle>
          </CardHeader>
          <CardContent>
             <Alert>
                <AlertTitle>Generated by VNDR AI</AlertTitle>
                <AlertDescription className="prose prose-sm dark:prose-invert max-w-none whitespace-pre-wrap">
                  {report}
                </AlertDescription>
              </Alert>
          </CardContent>
        </Card>
      )}
    </div>
  );
}
