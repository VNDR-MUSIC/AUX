
{
  "entities": {
    "Work": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Work",
      "type": "object",
      "description": "Represents a musical work (track) in the VNDR ecosystem.",
      "properties": {
        "id": { "type": "string", "description": "Unique identifier for the Work." },
        "artistId": { "type": "string", "description": "Reference to the User who is the primary artist." },
        "artistName": { "type": "string", "description": "Denormalized artist name for display purposes." },
        "title": { "type": "string" },
        "genre": { "type": "string" },
        "description": { "type": "string" },
        "uploadDate": { "type": "string", "format": "date-time" },
        "status": { "type": "string", "enum": ["pending", "processing", "published", "archived"], "description": "Processing status of the work."},
        "trackUrl": { "type": "string", "description": "Public URL for the streamable audio." },
        "coverArtUrl": { "type": "string", "description": "URL for the cover art." },
        "price": { "type": "number", "description": "Licensing price in VSD-lite tokens." },
        "plays": { "type": "number", "default": 0 },
        "audioFeatures": {
          "type": "object",
          "properties": { "bpm": { "type": "number" }, "key": { "type": "string" } }
        },
        "musoCreditsFetched": { "type": "boolean", "default": false },
        "acrCloudFingerprinted": { "type": "boolean", "default": false },
        "enrichedMetadata": { "type": "object" }
      },
      "required": ["artistId", "title", "uploadDate", "status"]
    },
    "User": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "title": "User",
        "type": "object",
        "description": "Represents a user profile, including their token balance.",
        "properties": {
            "id": { "type": "string" },
            "email": { "type": "string", "format": "email" },
            "username": { "type": "string" },
            "role": { "type": "string", "enum": ["artist", "admin"] },
            "onboardingCompleted": { "type": "object" },
            "vsdBalance": { "type": "number", "default": 0 },
            "dailyTokenClaimed": { "type": "string", "format": "date" }
        },
        "required": ["id", "email", "vsdBalance"]
    },
     "VSDTransaction": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "VSDTransaction",
      "type": "object",
      "description": "Represents a VSD-lite token transaction.",
      "properties": {
        "id": { "type": "string" },
        "userId": { "type": "string" },
        "transactionDate": { "type": "string", "format": "date-time" },
        "amount": { "type": "number" },
        "type": { "type": "string", "enum": ["deposit", "withdrawal", "service_fee", "purchase", "sale", "reward"]},
        "details": { "type": "string" }
      },
      "required": ["id", "userId", "transactionDate", "amount", "type"]
    },
    "LicenseRequest": {
        "title": "LicenseRequest",
        "type": "object",
        "description": "Represents a request from a third party to license a work.",
        "properties": {
            "id": { "type": "string" },
            "workId": { "type": "string" },
            "artistId": { "type": "string" },
            "requestorId": { "type": "string" },
            "requestorName": { "type": "string" },
            "requestorEmail": { "type": "string", "format": "email" },
            "status": { "type": "string", "enum": ["pending", "approved", "rejected"] },
            "requestDate": { "type": "string", "format": "date-time" }
        }
    },
    "KnowledgebaseArticle": {
        "title": "KnowledgebaseArticle",
        "type": "object",
        "properties": {
            "id": { "type": "string" },
            "topic": { "type": "string" },
            "title": { "type": "string" },
            "content": { "type": "string" }
        }
    }
  },
  "auth": {
    "providers": [
      "password",
      "google.com"
    ]
  },
  "firestore": {
    "rules": "rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    // Helper functions\n    function isOwner(userId) {\n      return request.auth.uid == userId;\n    }\n\n    function isAdmin() {\n      // This checks for a custom claim set on the user's auth token.\n      // For initial setup, the first admin user's UID can be hardcoded as a backup.\n      return request.auth.token.admin == true || request.auth.uid == 'LwauwKBFWjOBpR8PcXYgiE09PL83';\n    }\n\n    // Blanket Admin Access: Admins can read and write to any document.\n    match /{document=**} {\n      allow read, write: if isAdmin();\n    }\n\n    // Users can only read, create, and update their own user document.\n    match /users/{userId} {\n      allow read, update, create: if isOwner(userId) || isAdmin();\n    }\n\n    // Transactions can be created by the user, and read only by the owner.\n    match /vsd_transactions/{transactionId} {\n      allow create: if isOwner(request.resource.data.userId) || isAdmin();\n      allow read: if isOwner(resource.data.userId) || isAdmin();\n      // Security for listing transactions: Only allow if querying for self.\n      allow list: if isAdmin() || (request.auth != null && request.query.where[0][2] == request.auth.uid);\n    }\n\n    // Works can be read by anyone (for the public catalog).\n    // Creation, update, and deletion are restricted to the artist who owns the work.\n    match /works/{workId} {\n      allow read: if true;\n      allow create: if isOwner(request.resource.data.artistId) || isAdmin();\n      allow update, delete: if isOwner(resource.data.artistId) || isAdmin();\n    }\n    \n    // Security for listing works: Allow for admins, or if a user is querying for a specific artist's works.\n    match /works {\n        allow list: if isAdmin() || (request.auth != null && request.query.where[0][0] == 'artistId');\n    }\n\n    // License requests can be created by any authenticated user.\n    // Reading/updating is restricted to the artist or the requestor.\n    match /license_requests/{requestId} {\n      allow create: if request.auth != null;\n      allow read, update: if isOwner(resource.data.artistId) || isOwner(resource.data.requestorId) || isAdmin();\n    }\n    \n    // Security for listing license requests: Only for the artist or requestor being queried, or admin.\n    match /license_requests {\n       allow list: if isAdmin() || (request.auth != null && request.query.where[0][2] == request.auth.uid);\n    }\n\n    // Admin roles are stored in a separate collection. Only admins can read this.\n    match /roles_admin/{userId} {\n       allow read: if isAdmin();\n    }\n\n    // Knowledgebase is public.\n    match /knowledgebase/{articleId} {\n      allow read: if true;\n    }\n  }\n}",
    "/users/{userId}": {
      "schema": { "$ref": "#/entities/User" },
      "description": "Stores core user profile data, including their VSD balance."
    },
    "/works/{workId}": {
      "schema": { "$ref": "#/entities/Work" },
      "description": "Central collection for all musical works."
    },
    "/vsd_transactions/{transactionId}": {
      "schema": { "$ref": "#/entities/VSDTransaction" },
      "description": "Ledger of all VSD-lite token transactions."
    },
    "/license_requests/{requestId}": {
      "schema": { "$ref": "#/entities/LicenseRequest" },
      "description": "Stores music license requests from third parties."
    },
    "/roles_admin/{userId}": {
      "description": "Indicates admin privileges for a user. Document existence grants admin role."
    },
    "/knowledgebase/{articleId}": {
      "schema": { "$ref": "#/entities/KnowledgebaseArticle" },
      "description": "Stores articles for the knowledgebase."
    }
  }
}

    